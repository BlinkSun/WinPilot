using System.Reflection;
using System.Windows;
using System.Windows.Input;
using WinPilot.Controllers;
using WinPilot.Helpers;
using WinPilot.Managers;
using WinPilot.Models;
using WinPilot.Native;
using WinPilot.Resources;
using WinPilot.Services;

namespace WinPilot.ViewModels;

/// <summary>
/// ViewModel for the main WinPilot window.
/// Handles the interaction logic between captured context and OpenAI suggestions.
/// </summary>
public class WinPilotViewModel : ViewModelBase
{
    private readonly ContextSnapshot context;
    private string suggestion = string.Empty;
    private bool isLoading;
    private string thinkingText;

    /// <summary>
    /// The text displayed while the application is processing a suggestion.
    /// </summary>
    public string ThinkingText
    {
        get => thinkingText;
        set => SetProperty(ref thinkingText, value);
    }

    /// <summary>
    /// The user prompt selected in the context or the the view, which is used to generate suggestions.
    /// </summary>
    public string UserPrompt
    {
        get => context.SelectedText;
        set
        {
            if (context.SelectedText != value)
            {
                context.SelectedText = value;
                OnPropertyChanged();
            }
        }
    }

    /// <summary>
    /// A screenshot of the targeted window, used for context in the OpenAI API request.
    /// </summary>
    public byte[] ScreenshotBytes => context.ScreenshotBytes;

    /// <summary>
    /// The system prompt generated from the context snapshot.
    /// </summary>
    public string SystemPrompt => context.ToSystemPrompt();

    /// <summary>
    /// The suggestion generated by the OpenAI API based on the current context.
    /// </summary>
    public string Suggestion
    {
        get => suggestion;
        set => SetProperty(ref suggestion, value);
    }

    /// <summary>
    /// Indicates whether the application is currently loading a suggestion.
    /// </summary>
    public bool IsLoading
    {
        get => isLoading;
        set => SetProperty(ref isLoading, value);
    }

    /// <summary>
    /// Commands for user actions in the WinPilot window.
    /// </summary>
    public ICommand AcceptCommand { get; }
    public ICommand DeclineCommand { get; }
    public ICommand SettingsCommand { get; }

    /// <summary>
    /// Initializes a new instance of the WinPilotViewModel class.
    /// </summary>
    public WinPilotViewModel(ContextSnapshot snapshot)
    {
        thinkingText = GetRandomThinkingMessage();
        context = snapshot;

        AcceptCommand = new RelayCommand(OnAccept, (obj) => !string.IsNullOrEmpty(Suggestion));
        DeclineCommand = new RelayCommand(OnDecline);
        SettingsCommand = new RelayCommand(OnSettings);

        if (SettingsManager.AutoSendPrompt)
            Task.Run(() => GenerateSuggestionAsync());
    }

    /// <summary>
    /// Generates a suggestion using the OpenAI API based on the current context.
    /// </summary>
    public async Task GenerateSuggestionAsync()
    {
        if (string.IsNullOrWhiteSpace(SystemPrompt))
            return;

        IsLoading = true;

        try
        {
            OpenAIClient client = new();
            string? result = await client.SendContextToGPTAsync(SystemPrompt, UserPrompt, ScreenshotBytes);

            Suggestion = string.IsNullOrWhiteSpace(result)
                ? "No suggestion received."
                : result.Trim();
        }
        catch (Exception ex)
        {
            Suggestion = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    /// <summary>
    /// Handles the Settings command.
    /// </summary>
    private void OnSettings(object? obj)
    {
        UIController.ShowSettingsWindow();
    }

    /// <summary>
    /// Handles the Accept command.
    /// </summary>
    private async void OnAccept(object? obj)
    {
        try
        {
            Clipboard.SetText(Suggestion);
            await Task.Delay(100);
            await UIController.CloseWinPilotWindowAsync();
            if (context.WindowHandle != IntPtr.Zero)
            {
                Win32Api.SetForegroundWindow(context.WindowHandle);
                await Task.Delay(100);
            }
            CopyPasteHelper.Paste();
        }
        catch (Exception ex)
        {
            MessageBox.Show("Could not insert suggestion: " + ex.Message);
        }
    }

    /// <summary>
    /// Handles the Decline command.
    /// </summary>
    private async void OnDecline(object? obj)
    {
        await UIController.CloseWinPilotWindowAsync();
    }

    /// <summary>
    /// Generates a random thinking message to display while waiting for a suggestion.
    /// </summary>
    private string GetRandomThinkingMessage()
    {
        if (thinkingMessages.Length == 0)
            thinkingMessages = ["Thinking..."];
        return thinkingMessages[Random.Shared.Next(thinkingMessages.Length)];
    }

    /// <summary>
    /// Array of thinking messages to display while waiting for a suggestion.
    /// </summary>
    private string[] thinkingMessages = [
        .. typeof(ThinkingMessages)
        .GetProperties(BindingFlags.Static | BindingFlags.Public)
        .Where(p => p.Name.StartsWith("Thinking"))
        .Select(p => p.GetValue(null)?.ToString())
        .Where(s => !string.IsNullOrWhiteSpace(s))
        .Cast<string>()
    ];
}